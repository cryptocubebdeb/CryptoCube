-- 1) utilisateur
CREATE TABLE utilisateur (
    id_utilisateur INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    email          VARCHAR(100) NOT NULL UNIQUE,
    mot_de_passe   VARCHAR(255) NOT NULL,
    nom            VARCHAR(50)  NOT NULL,
    prenom         VARCHAR(50)  NOT NULL,
    username       VARCHAR(50)  NOT NULL UNIQUE
);

-- 2) publication
CREATE TABLE publication (
    id_publication INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    contenu        TEXT        NOT NULL,
    date_publication TIMESTAMP NOT NULL DEFAULT NOW(),
    utilisateur_id INTEGER     NOT NULL REFERENCES utilisateur(id_utilisateur)
);

-- 3) comments
CREATE TABLE comments (
    id_commentaire  INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    contenu         TEXT        NOT NULL,
    date_commentaire TIMESTAMP  NOT NULL DEFAULT NOW(),
    publication_id  INTEGER     NOT NULL REFERENCES publication(id_publication),
    utilisateur_id  INTEGER     NOT NULL REFERENCES utilisateur(id_utilisateur)
);

-- 4) likes
CREATE TABLE likes (
    id_like        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    date_like      TIMESTAMP NOT NULL DEFAULT NOW(),
    publication_id INTEGER   NOT NULL REFERENCES publication(id_publication),
    utilisateur_id INTEGER   NOT NULL REFERENCES utilisateur(id_utilisateur),
    UNIQUE (publication_id, utilisateur_id)
);

-- 5) reposts
CREATE TABLE reposts (
    id_repost      INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    date_repost    TIMESTAMP NOT NULL DEFAULT NOW(),
    publication_id INTEGER   NOT NULL REFERENCES publication(id_publication),
    utilisateur_id INTEGER   NOT NULL REFERENCES utilisateur(id_utilisateur),
    UNIQUE (publication_id, utilisateur_id)
);

-- 6) notification
CREATE TABLE notification (
    id_notification INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    type            VARCHAR(50) NOT NULL,
    message         TEXT        NOT NULL,
    date_envoi      TIMESTAMP   NOT NULL DEFAULT NOW(),
    utilisateur_id  INTEGER     NOT NULL REFERENCES utilisateur(id_utilisateur)
);

-- 7) session
CREATE TABLE session (
    id_session      INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    date_connexion  TIMESTAMP NOT NULL DEFAULT NOW(),
    date_expiration TIMESTAMP NOT NULL,
    utilisateur_id  INTEGER   NOT NULL REFERENCES utilisateur(id_utilisateur),
    token           CHAR(64)  NOT NULL UNIQUE
);

-- 8) watchlist
CREATE TABLE watchlist (
    id_watchlist   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    date_ajout     TIMESTAMP NOT NULL DEFAULT NOW(),
    utilisateur_id INTEGER   NOT NULL REFERENCES utilisateur(id_utilisateur)
);

-- Index utiles sur les clés étrangères
CREATE INDEX idx_publication_utilisateur   ON publication(utilisateur_id);
CREATE INDEX idx_comments_publication      ON comments(publication_id);
CREATE INDEX idx_comments_utilisateur      ON comments(utilisateur_id);
CREATE INDEX idx_likes_publication         ON likes(publication_id);
CREATE INDEX idx_likes_utilisateur         ON likes(utilisateur_id);
CREATE INDEX idx_reposts_publication       ON reposts(publication_id);
CREATE INDEX idx_reposts_utilisateur       ON reposts(utilisateur_id);
CREATE INDEX idx_notification_utilisateur  ON notification(utilisateur_id);
CREATE INDEX idx_session_utilisateur       ON session(utilisateur_id);
CREATE INDEX idx_watchlist_utilisateur     ON watchlist(utilisateur_id);
