// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id         Int    @id @default(autoincrement()) @map("id_utilisateur")
  email      String @unique @db.VarChar(100)
  motDePasse String @map("mot_de_passe") @db.VarChar(255)
  nom        String @db.VarChar(50)
  prenom     String @db.VarChar(50)
  username   String @unique @db.VarChar(50)

  resetToken PasswordResetToken?
  watchlistItems WatchlistItem[]
  
  @@map("utilisateur")
}

model PasswordResetToken {
  userId          Int       @id
  resetToken      String    @db.VarChar(255) // store hashed token
  tokenValidFrom  DateTime  @default(now())
  tokenValidUntil DateTime  @default(dbgenerated("now() + interval '1 hour'"))

  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model WatchlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  coinId    String   @map("coin_id") @db.VarChar(100)
  addedAt   DateTime @default(now()) @map("added_at")

  user Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, coinId]) // Un utilisateur ne peut pas avoir le mÃªme coin deux fois
  @@map("watchlist_items")
}