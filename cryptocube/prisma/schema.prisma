// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
//      USER MODEL
// ======================

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  emailVerified  DateTime? // used by NextAuth
  name           String?
  prenom         String?
  username       String?   @unique
  passwordHash   String?   // hashed password for credentials login

  // Relations
  accounts       Account[]         // OAuth logins (Google, Facebook, Reddit…)
  sessions       Session[]         // active login sessions
  resetToken     PasswordResetToken?
  watchlistItems WatchlistItem[]   // a user can have multiple watchlist items
}


// ======================
//        ACCOUNT
// ======================

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// ======================
//        SESSION
// ======================

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ======================
//   VERIFICATION TOKEN
// ======================

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ======================
//      RESET TOKEN
// ======================

model PasswordResetToken {
  userId          Int      @id
  resetToken      String
  tokenValidFrom  DateTime @default(now())
  tokenValidUntil DateTime @default(dbgenerated("now() + interval '1 hour'"))

  user User @relation(fields: [userId], references: [id])
}

// ======================
//       WATCHLIST
// ======================

model WatchlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  coinId    String
  addedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, coinId]) // Un utilisateur ne peut pas avoir le même coin deux fois
}